# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.2
commands:
  destroy_environment:
    description: destroy aws stack
    steps:
      - run:
         name: destroy aws environment
         command : aws cloudformation delete-stack --stack-name my-stack
#  -public_ip_addresses:
#    description: "get the public ip addresses of EC2 instances"
#    steps:
#      - run : aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udacity" --output text >> ~/inventory
#  -infrastructure:
#    description: "spin an AWS Infra"
#    steps:
#      - run : aws cloudformation create-stack --stack-name circle-ci --template-body file://template.yml --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM" --region=us-east-1

# Use a package of configuration called an orb.
jobs:
  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - run:
         name: create bucket
        #  command: aws cloudformation create-stack --stack-name "${CIRCLE_WORKFLOW_ID}" --template-body file://bucket.yml --parameter-overrides NAME="${CIRCLE_WORKFLOW_ID}" --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM" --region=us-east-1
        #  command: aws cloudformation deploy --stack-name "${CIRCLE_WORKFLOW_ID}" --template-file bucket.yml --parameter-overrides NAME="${CIRCLE_WORKFLOW_ID}" 
         command: |
          aws cloudformation deploy \
              --template-file bucket.yml \
              --stack-name "${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides NAME="${CIRCLE_WORKFLOW_ID}"
  # get_last_deployment_id:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - run:
  #        name: create bucket
  #        command: aws cloudformation list-exports --query "Exports[?Name==\`PipelineID\`].Value" --no-paginate --output text > ~/pipelineid
  #     - persist_to_workspace:
  #          root: ~/
  #          paths:
  #             - pipelineid
  promote_to_production:
    docker:
      - image: amazon/aws-cli  
    steps:
        - run : 
            name: create new cloudFront
            command: aws cloudformation deploy --template-file cloudfront.yml --stack-name cloudfront --parameter-overrides PipelineID="${CIRCLE_WORKFLOW_ID}"
  
  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - run:
         name: delete old S3 bucket
         command: aws s3 rm "s3://my-udacity-circle-ci" --recursive 
  # create_infrastructure:
  #  docker:
  #    - image: amazon/aws-cli
  #  steps:
  #   - checkout
  #   - run:
  #      name: aws create stack
  #      command : aws cloudformation create-stack --stack-name my-stack --template-body file://networkinfra.yml --parameters file://networkinfra-params.json --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM" --region=us-east-1
  #     #  command: aws cloudformation deploy --template-file template.yml  --stack-name my-stack
  #   - run :
  #      name: cause failure
  #      command: return 1
  #   - run:
  #      name: rollback
  #      command: aws cloudformation delete-stack --stack-name my-stack
  #      when: on_fail
  # smoke_test:
  #   docker:
  #     - image: alpine:latest
  #   steps:
  #     - run: apk add --update curl
  #     - run:
  #         name: smoke test.
  #         command: |
  #           URL="https://blog.udacity.com/"
  #           if curl -s --head ${URL} # test if blog.udacity. com exists
  #           then
  #           return 0
  #           else
  #           return 1
  #           fi
  # deploy_with_ansible:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #      - checkout
  #      - add_ssh_keys:
  #         fingerprints:
  #           - "76:48:36:85:f6:60:cd:2a:b2:f9:ed:68:58:de:6c:0b"
  #      - run : cat ~/.ssh/known_hosts     
  #      - run :
  #         name : install dependancies
  #         command: apk add --update ansible    
  #      - run :
  #         name: run ansible playbook
  #         command: ansible-playbook main-remote.yml -i inventory 
  

  # ansible_inventory:
  #   docker: 
  #    - image: circleci/node:13.8.0
  #   steps:
  #    - aws-cli/setup
  #    - run:
  #       name: create inventory file
  #       command:
  #          echo [all] > ~/inventory
  #    - public_ip_addresses     
  #    - persist_to_workspace:
  #       root: ~/
  #       paths:
  #            - inventory
  # print_output_file:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #        name: echo output
  #        command:
  #         cat ~/inventory

    
  # cause_failure:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - run : return 1
  #     - run :
  #         name: handle error
  #         command: echo "Hello Error"
  #         when: on_fail
  # use_commands:
  #    docker:
  #      - image: circleci/node:13.8.0
  #    steps:
  #      - print_pipeline_id
  # save_hello_world_output:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - run:
  #        name: input 
  #        command:
  #         echo "hello world" > ~/output.txt
  #     - persist_to_workspace:
  #         root: ~/
  #         paths:
  #           - output.txt

  # print_output_file:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #        name: echo output
  #        command:
  #         cat ~/output.txt

# Orchestrate or schedule a set of jobs
workflows:
  # Name the workflow "welcome"
  udacity:
    # Run the welcome/run job in its own container
    jobs:
      - create_and_deploy_front_end:
         context: udacity
      - promote_to_production:
          context: udacity
          requires : [create_and_deploy_front_end]
      - clean_up_old_front_end:
          context: udacity
          requires: [promote_to_production]
      
      # - smoke_test
      # - deploy_with_ansible
      # - create_infrastructure:
      #    context: udacity
      # - ansible_inventory:
      #    context: udacity
      # - print_output_file:
      #    requires:
      #      - ansible_inventory
      
      # - cause_failure
      # - use_commands
      # - save_hello_world_output
      # - print_output_file :
      #    requires :
      #      - save_hello_world_output
